generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  providerAccountId        String
  access_token             String?
  expires_at               Int?
  id_token                 String?
  provider                 String
  refresh_token            String?
  refresh_token_expires_in Int?
  scope                    String?
  session_state            String?
  token_type               String?
  type                     String
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}



model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  profileId     Int?
  emailVerified DateTime?
  image         String?
  name          String?
  password      String?
  fullName      String?
  username      String?   @unique
  bio           String?
  accounts      Account[]
  sessions      Session[]
  sentPosts     Post[]    @relation("SentPosts")
  receivedPosts    Post[]   @relation("ReceivedPosts")
  likedPosts       Post[]   @relation("LikedPosts")
  commentedPosts   Post[]   @relation("CommentedPosts")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Many-to-Many Self-Referential Relationship
  following Follow[] @relation("UserFollowsFollowing")
  followers Follow[] @relation("UserFollowsFollowers")
}

model Post {
  id          Int      @id @default(autoincrement())
  content     String
  message     String?
  sentBy      User     @relation("SentPosts", fields: [senderId], references: [id], onDelete: Cascade)
  senderId    String
  receivedBy  User     @relation("ReceivedPosts", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId  String
  likedBy     User?    @relation("LikedPosts", fields: [likerId], references: [id], onDelete: Cascade)
  likerId     String?
  commentedBy User?    @relation("CommentedPosts", fields: [commenterId], references: [id], onDelete: Cascade)
  commenterId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Follow {
  followerId  String
  followingId String

  follower  User @relation("UserFollowsFollowers", fields: [followerId], references: [id])
  following User @relation("UserFollowsFollowing", fields: [followingId], references: [id])

  @@id([followerId, followingId]) // Composite key to prevent duplicate follows
}