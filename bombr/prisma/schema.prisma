generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  fullName      String?
  username      String?
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  profileId     Int?
  followers     Profile?  @relation("Followers", fields: [profileId], references: [id], map: "User_followers_profileId_fkey")
  following     Profile?  @relation("Following", fields: [profileId], references: [id], map: "User_following_profileId_fkey")
  Profile       Profile?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id            Int    @id @default(autoincrement())
  PostsReceived Post[] @relation("ReceivedPosts")
  PostsSent     Post[] @relation("SentPosts")
  Followers     User[] @relation("Followers")
  Following     User[] @relation("Following")
  bio           String

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Post {
  id         Int     @id @default(autoincrement())
  content    String? // Stores the URL of an image, GIF, or video
  message    String?
  receiverId Int
  receiver   Profile @relation("ReceivedPosts", fields: [receiverId], references: [id])
  senderId   Int
  sender     Profile @relation("SentPosts", fields: [senderId], references: [id])
}
